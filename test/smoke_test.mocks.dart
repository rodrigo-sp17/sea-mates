// Mocks generated by Mockito 5.0.7 from annotations
// in sea_mates/test/smoke_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:logging/src/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sea_mates/data/friend.dart' as _i3;
import 'package:sea_mates/data/shift.dart' as _i7;
import 'package:sea_mates/data/user.dart' as _i4;
import 'package:sea_mates/repository/impl/friends_web_client.dart' as _i8;
import 'package:sea_mates/repository/impl/shift_web_client.dart' as _i5;
import 'package:sea_mates/repository/impl/user_hive_repo.dart' as _i9;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeLogger extends _i1.Fake implements _i2.Logger {}

class _FakeFriendRequest extends _i1.Fake implements _i3.FriendRequest {}

class _FakeFriend extends _i1.Fake implements _i3.Friend {}

class _FakeUser extends _i1.Fake implements _i4.User {}

/// A class which mocks [ShiftWebClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockShiftWebClient extends _i1.Mock implements _i5.ShiftWebClient {
  MockShiftWebClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i7.Shift>> addRemote(_i7.Shift? shift, String? token) =>
      (super.noSuchMethod(Invocation.method(#addRemote, [shift, token]),
              returnValue: Future<List<_i7.Shift>>.value(<_i7.Shift>[]))
          as _i6.Future<List<_i7.Shift>>);
  @override
  _i6.Future<List<_i7.Shift>> loadRemote(String? token) =>
      (super.noSuchMethod(Invocation.method(#loadRemote, [token]),
              returnValue: Future<List<_i7.Shift>>.value(<_i7.Shift>[]))
          as _i6.Future<List<_i7.Shift>>);
  @override
  _i6.Future<bool> removeRemote(int? shiftId, String? token) =>
      (super.noSuchMethod(Invocation.method(#removeRemote, [shiftId, token]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<List<_i7.Shift>> saveRemote(
          Iterable<_i7.Shift>? shifts, String? token) =>
      (super.noSuchMethod(Invocation.method(#saveRemote, [shifts, token]),
              returnValue: Future<List<_i7.Shift>>.value(<_i7.Shift>[]))
          as _i6.Future<List<_i7.Shift>>);
}

/// A class which mocks [FriendsWebClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendsWebClient extends _i1.Mock implements _i8.FriendsWebClient {
  MockFriendsWebClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger())
          as _i2.Logger);
  @override
  _i6.Future<List<_i3.Friend>> getFriends(String? token) =>
      (super.noSuchMethod(Invocation.method(#getFriends, [token]),
              returnValue: Future<List<_i3.Friend>>.value(<_i3.Friend>[]))
          as _i6.Future<List<_i3.Friend>>);
  @override
  _i6.Future<List<_i3.FriendRequest>> getRequests(String? token) =>
      (super.noSuchMethod(Invocation.method(#getRequests, [token]),
              returnValue:
                  Future<List<_i3.FriendRequest>>.value(<_i3.FriendRequest>[]))
          as _i6.Future<List<_i3.FriendRequest>>);
  @override
  _i6.Future<List<_i3.Friend>> getAvailableFriends(
          String? token, DateTime? dateTime) =>
      (super.noSuchMethod(
              Invocation.method(#getAvailableFriends, [token, dateTime]),
              returnValue: Future<List<_i3.Friend>>.value(<_i3.Friend>[]))
          as _i6.Future<List<_i3.Friend>>);
  @override
  _i6.Future<_i3.FriendRequest> requestFriendship(
          String? token, String? username) =>
      (super.noSuchMethod(
              Invocation.method(#requestFriendship, [token, username]),
              returnValue:
                  Future<_i3.FriendRequest>.value(_FakeFriendRequest()))
          as _i6.Future<_i3.FriendRequest>);
  @override
  _i6.Future<_i3.Friend> acceptRequest(String? token, String? username) =>
      (super.noSuchMethod(Invocation.method(#acceptRequest, [token, username]),
              returnValue: Future<_i3.Friend>.value(_FakeFriend()))
          as _i6.Future<_i3.Friend>);
  @override
  _i6.Future<bool> removeFriend(String? token, String? username) =>
      (super.noSuchMethod(Invocation.method(#removeFriend, [token, username]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
}

/// A class which mocks [UserHiveRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserHiveRepository extends _i1.Mock
    implements _i9.UserHiveRepository {
  MockUserHiveRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.User> loadUser() =>
      (super.noSuchMethod(Invocation.method(#loadUser, []),
              returnValue: Future<_i4.User>.value(_FakeUser()))
          as _i6.Future<_i4.User>);
  @override
  _i6.Future<void> saveUser(_i4.User? user) =>
      (super.noSuchMethod(Invocation.method(#saveUser, [user]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> dropUser() =>
      (super.noSuchMethod(Invocation.method(#dropUser, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
}
